Ravg <- 0
H = rep(0,5)
probabilities = pi(H)
rate <- 0.1
action <- sampleAction(probabilities)
action
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - probabilities[action])
H
H[-action] <- H[-action] - rate*(R[action] - Ravg)*probabilities[-action]
H
probabilities <- pi(H)
probabilities
action <- sampleAction(probabilities)
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - probabilities[action])
H
action
H[-action] <- H[-action] - rate*(R[action] - Ravg)*probabilities[-action]
H
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H = rep(0,5)
rate <- 0.1
for (i in 1000) {
probabilities <- pi(H)
action <- sampleAction(probabilities)
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - probabilities[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*probabilities[-action]
}
H
probabilities
prob
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <- rep(0,5)
rate <- 0.1
for (i in 1000) {
probabilities <- pi(H)
action <- sampleAction(probabilities)
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - probabilities[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*probabilities[-action]
}
probabilities
H
pi(H)
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <- rep(0,5)
rate <- 0.1
for (i in 1000) {
probabilities <<- pi(H)
action <<- sampleAction(probabilities)
H[action] <<- H[action] + rate*(R[action] - Ravg)*(1 - probabilities[action])
H[-action] <<- H[-action] - rate*(R[action] - Ravg)*probabilities[-action]
}
H
probabilities
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <- rep(0,5)
rate <- 0.1
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <- rep(0,5)
rate <- 0.1
for (i in 1000) {
probabilities <<- pi(H)
action <<- sampleAction(probabilities)
Ravg <- Ravg + (R[action] - Ravg)/n
H[action] <<- H[action] + rate*(R[action] - Ravg)*(1 - probabilities[action])
H[-action] <<- H[-action] - rate*(R[action] - Ravg)*probabilities[-action]
}
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <- rep(0,5)
rate <- 0.1
for (i in 1000) {
probabilities <<- pi(H)
action <<- sampleAction(probabilities)
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <<- H[action] + rate*(R[action] - Ravg)*(1 - probabilities[action])
H[-action] <<- H[-action] - rate*(R[action] - Ravg)*probabilities[-action]
}
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 1000) {
probabilities <<- pi(H)
action <<- sampleAction(probabilities)
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <<- H[action] + rate*(R[action] - Ravg)*(1 - probabilities[action])
H[-action] <<- H[-action] - rate*(R[action] - Ravg)*probabilities[-action]
}
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
probabilities <<- pi(H)
action <<- sampleAction(probabilities)
Ravg <<- Ravg + (R[action] - Ravg)/i
Ravg
R[action]
iu
i
u = 1
i
i = 1
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
probabilities <<- pi(H)
action <<- sampleAction(probabilities)
action
Ravg <<- Ravg + (R[action] - Ravg)/i
Ravg
H
probabilities
H[action] <<- H[action] + rate*(R[action] - Ravg)*(1 - probabilities[action])
H[action]
H[action] + rate*(R[action] - Ravg)*(1 - probabilities[action])
rate*(R[action] - Ravg)*(1 - probabilities[action])
H[action] <<- H[action] + rate*(R[action] - Ravg)*(1 - probabilities[action])
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - probabilities[action])
H[action]
H[-action] <- H[-action] - rate*(R[action] - Ravg)*probabilities[-action]
H
Ravg
probabilities <<- pi(H)
probabilities
action <<- sampleAction(probabilities)
action
Ravg <<- Ravg + (R[action] - Ravg)/i
Ravg
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - probabilities[action])
H
H[action] + rate*(R[action] - Ravg)*(1 - probabilities[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*probabilities[-action]
H[-action]
Ravg
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 1000) {
probabilities <<- pi(H)
action <<- sampleAction(probabilities)
Ravg <<- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - probabilities[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*probabilities[-action]
}
H
Ravg
action
H
probabilities
pi(H)
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 1000) {
probabilities <<- pit(H)
action <<- sampleAction(pit(H))
Ravg <<- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - probabilities[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*probabilities[-action]
}
pit = function(x) {
return((exp(x))/sum(exp(x)))
}
sampleAction <- function(pis){
actions <- 1:5
action <- sample(actions,size = 1,prob = pis, replace = TRUE)
action
}
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 1000) {
probabilities <<- pit(H)
action <<- sampleAction(pit(H))
Ravg <<- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - probabilities[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*probabilities[-action]
}
probabilities
H
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 1000) {
probabilities <- pit(H)
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - probabilities[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*probabilities[-action]
}
H
H
H
probabilities
pit(H)
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 1000) {
probabilities <- pit(H)
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <<- H[action] + rate*(R[action] - Ravg)*(1 - probabilities[action])
H[-action] <<- H[-action] - rate*(R[action] - Ravg)*probabilities[-action]
}
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 1000) {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
}
H
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 1000) {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
}
H
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 10000) {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
}
H
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 10000) {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
}
H
H = rep(0,5)
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 10000) {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
}
H
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 10000) {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
}
H
repeat
h
help(repeat)
??repeat
repeat(1:{
repeat??
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
i <- 1
repeat {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
i <- i + 1
if (i > 1000){ break}
}
H
H = rep(0,5)
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
i <- 1
repeat {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
i <- i + 1
if (i > 1000){ break}
}
H
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
i <- 1
repeat {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
i <- i + 1
if (i > 1000){ break}
}
H
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
i <- 1
repeat {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
i <- i + 1
if (i > 1000){ break}
}
H
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
i <- 1
prob_storage <- data.frame(H)
repeat {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
prob_storage <- rbind(prob_storage,H)
i <- i + 1
if (i > 1000){ break}
}
H
prob_storage
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
i <- 1
prob_storage <- data.frame(t(H))
repeat {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
prob_storage <- rbind(prob_storage,H)
i <- i + 1
if (i > 1000){ break}
}
prob_storage
plot(prob_storage)
plot(prob_storage,type= l)
plot(prob_storage,type= 'l')
plot(x = 1:1001,y = prob_storage,type= 'l')
plot(x = rep(1:1001,5),y = prob_storage,type= 'l')
rep(1:1001,5)
plot(x = c(1:1001,1:1001,1:1001,1:1001),y = prob_storage,type= 'l')
plot(x = c(1:1001,1:1001,1:1001,1:1001,1:1001),y = prob_storage,type= 'l')
dim(y)
dim(prob_storage)
c(1:1001,1:1001,1:1001,1:1001)
c(t(1:1001),t(1:1001),t(1:1001),t(1:1001)
)
rep(t(1:1001),5)
matrix(rep(t(1:1001),5),ncol = 5)
plot(x = matrix(rep(t(1:1001),5),ncol = 5),y = prob_storage,type = "l")
dim(matrix(rep(t(1:1001),5),ncol = 5))
dim(prob_storage)
plot(x = matrix(rep(t(1:1001),5),ncol = 5),y = prob_storage)
plot(prob_storage[1,])
plot(prob_storage[,1])
plot(prob_storage[,1],type = "l")
lines(prob_storage[,2])
lines(prob_storage[,3])
lines(prob_storage[,4])
lines(prob_storage[,5])
prob_storage
plot(prob_storage[,1],type = "l")
lines(prob_storage[,5],col = 1)
lines(prob_storage[,5],col = 2)
plot(x = 1:1001, prob_storage[,1],type = "l")
plot(x = 1:1001, prob_storage[,1],type = "l",col = 1)
plot(x = 1:1001, prob_storage[,1],type = "l",col = 1=2)
plot(x = 1:1001, prob_storage[,1],type = "l",col = 2)
lines(x = 1:1001, prob_storage[,2],col = 3)
plot(x = 1:1001, prob_storage[,1],type = "l",col = 1,ylim = c(-6,6))
lines(x = 1:1001, prob_storage[,2],col = 3)
lines(x = 1:1001, prob_storage[,3],col = 3)
lines(x = 1:1001, prob_storage[,3],col = 4)
lines(x = 1:1001, prob_storage[,4],col = 5)
lines(x = 1:1001, prob_storage[,5],col = 6)
Rcpp::sourceCpp('test.cpp')
timesTwo(100)
timesTwo(10000)
timesTwo(100000000)
timesTwo(-2e100)
runSim <- function(inputProbs) {
pardons <- sample(prob = inputProbs,x = c("A","B","C"),size = 10000,replace = TRUE)
Results <- data.frame("1","2")
colnames(Results) <- c("Pardon","WardenTells")
for(i in 1:length(pardons)){
pardon <- pardons[i]
if(pardon == "A") {
wardenTell <- sample( x = c("B","C"),size = 1)
hold <- data.frame(pardon,wardenTell)
colnames(hold) <- c("Pardon","WardenTells")
Results <- rbind(Results,hold)
}
if(pardon == "B"){
wardenTell <- "C"
hold <- data.frame(pardon,wardenTell)
colnames(hold) <- c("Pardon","WardenTells")
Results <- rbind(Results,hold)
}
if(pardon == "C"){
wardenTell <- "B"
hold <- data.frame(pardon,wardenTell)
colnames(hold) <- c("Pardon","WardenTells")
Results <- rbind(Results,hold)
}
}
return(Results)
}
i_1 <- c(1/3,1/3,1/3)
i_2 <- c(1/2,1/4,1/4)
i_3 <- c(1/4,1/2,1/4)
i_4 <- c(1/4,1/4,1/2)
i_5 <- c(1/7,2/7,4/7)
results <- runSim(i_5)[-1,]
results$Pardon <- as.character(results$Pardon)
results$WardenTells <- as.character(results$WardenTells)
#write.csv(x = results, file= "results.csv")
tellsB <- table(results[results$WardenTells == "B",]$Pardon)
tellsC <- table(results[results$WardenTells == "C",]$Pardon)
cite(mclust)
library(mclust)
citation(mclust)
citation("mclust")
citation('USArrests')
USArrests
citation("USArrests")
train <- read.csv("Downloads/superconduct/train.csv")
train
train$critical_temp
train$number_of_elements
table(train$number_of_elements)
train$mean_atomic_mass
hist(train$mean_atomic_mass)
hist(train$mean_atomic_mass,breaks = 100)
hist(train$wtd_mean_atomic_mass)
hist(train$gmean_atomic_mass)
pairs(train)
pairs(train)
pairs(scale(train))
plot.new()
par(mar = rep(2, 4))
pairs(scale(train))
pairs(scale(train))
setwd("~/GitRepos/ZCWMT/FrequencyCode/zv_08_01_2018")
new_m <- read.csv("new_m.csv")
attach(new_m)
c_new <- new_m$partitions
c_new[c_new == 1] <- 'limegreen'
c_new[c_new == 2] <- 'red'
#c_new[c_new == 3] <- '#ffb62f'
c_new[c_new == 3] <- 'blue'
new_m$c_new <- c_new
p <-  ggplot(new_m, aes(x=LogDensity, y=ClaimNb)) +
theme( axis.line = element_line(colour = "black"),
panel.background = element_blank()) +
geom_point(color=c_new,
size = partitions/2
)  + xlab("Density") + ylab("Claim Nb")
p
library(ggplot2)
p <-  ggplot(new_m, aes(x=LogDensity, y=ClaimNb)) +
theme( axis.line = element_line(colour = "black"),
panel.background = element_blank()) +
geom_point(color=c_new,
size = partitions/2
)  + xlab("Density") + ylab("Claim Nb")
p
p
