for (i in 1000) {
probabilities <<- pit(H)
action <<- sampleAction(pit(H))
Ravg <<- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - probabilities[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*probabilities[-action]
}
pit = function(x) {
return((exp(x))/sum(exp(x)))
}
sampleAction <- function(pis){
actions <- 1:5
action <- sample(actions,size = 1,prob = pis, replace = TRUE)
action
}
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 1000) {
probabilities <<- pit(H)
action <<- sampleAction(pit(H))
Ravg <<- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - probabilities[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*probabilities[-action]
}
probabilities
H
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 1000) {
probabilities <- pit(H)
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - probabilities[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*probabilities[-action]
}
H
H
H
probabilities
pit(H)
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 1000) {
probabilities <- pit(H)
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <<- H[action] + rate*(R[action] - Ravg)*(1 - probabilities[action])
H[-action] <<- H[-action] - rate*(R[action] - Ravg)*probabilities[-action]
}
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 1000) {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
}
H
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 1000) {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
}
H
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 10000) {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
}
H
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 10000) {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
}
H
H = rep(0,5)
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 10000) {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
}
H
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 10000) {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
}
H
repeat
h
help(repeat)
??repeat
repeat(1:{
repeat??
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
i <- 1
repeat {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
i <- i + 1
if (i > 1000){ break}
}
H
H = rep(0,5)
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
i <- 1
repeat {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
i <- i + 1
if (i > 1000){ break}
}
H
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
i <- 1
repeat {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
i <- i + 1
if (i > 1000){ break}
}
H
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
i <- 1
repeat {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
i <- i + 1
if (i > 1000){ break}
}
H
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
i <- 1
prob_storage <- data.frame(H)
repeat {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
prob_storage <- rbind(prob_storage,H)
i <- i + 1
if (i > 1000){ break}
}
H
prob_storage
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
i <- 1
prob_storage <- data.frame(t(H))
repeat {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
prob_storage <- rbind(prob_storage,H)
i <- i + 1
if (i > 1000){ break}
}
prob_storage
plot(prob_storage)
plot(prob_storage,type= l)
plot(prob_storage,type= 'l')
plot(x = 1:1001,y = prob_storage,type= 'l')
plot(x = rep(1:1001,5),y = prob_storage,type= 'l')
rep(1:1001,5)
plot(x = c(1:1001,1:1001,1:1001,1:1001),y = prob_storage,type= 'l')
plot(x = c(1:1001,1:1001,1:1001,1:1001,1:1001),y = prob_storage,type= 'l')
dim(y)
dim(prob_storage)
c(1:1001,1:1001,1:1001,1:1001)
c(t(1:1001),t(1:1001),t(1:1001),t(1:1001)
)
rep(t(1:1001),5)
matrix(rep(t(1:1001),5),ncol = 5)
plot(x = matrix(rep(t(1:1001),5),ncol = 5),y = prob_storage,type = "l")
dim(matrix(rep(t(1:1001),5),ncol = 5))
dim(prob_storage)
plot(x = matrix(rep(t(1:1001),5),ncol = 5),y = prob_storage)
plot(prob_storage[1,])
plot(prob_storage[,1])
plot(prob_storage[,1],type = "l")
lines(prob_storage[,2])
lines(prob_storage[,3])
lines(prob_storage[,4])
lines(prob_storage[,5])
prob_storage
plot(prob_storage[,1],type = "l")
lines(prob_storage[,5],col = 1)
lines(prob_storage[,5],col = 2)
plot(x = 1:1001, prob_storage[,1],type = "l")
plot(x = 1:1001, prob_storage[,1],type = "l",col = 1)
plot(x = 1:1001, prob_storage[,1],type = "l",col = 1=2)
plot(x = 1:1001, prob_storage[,1],type = "l",col = 2)
lines(x = 1:1001, prob_storage[,2],col = 3)
plot(x = 1:1001, prob_storage[,1],type = "l",col = 1,ylim = c(-6,6))
lines(x = 1:1001, prob_storage[,2],col = 3)
lines(x = 1:1001, prob_storage[,3],col = 3)
lines(x = 1:1001, prob_storage[,3],col = 4)
lines(x = 1:1001, prob_storage[,4],col = 5)
lines(x = 1:1001, prob_storage[,5],col = 6)
Rcpp::sourceCpp('test.cpp')
timesTwo(100)
timesTwo(10000)
timesTwo(100000000)
timesTwo(-2e100)
runSim <- function(inputProbs) {
pardons <- sample(prob = inputProbs,x = c("A","B","C"),size = 10000,replace = TRUE)
Results <- data.frame("1","2")
colnames(Results) <- c("Pardon","WardenTells")
for(i in 1:length(pardons)){
pardon <- pardons[i]
if(pardon == "A") {
wardenTell <- sample( x = c("B","C"),size = 1)
hold <- data.frame(pardon,wardenTell)
colnames(hold) <- c("Pardon","WardenTells")
Results <- rbind(Results,hold)
}
if(pardon == "B"){
wardenTell <- "C"
hold <- data.frame(pardon,wardenTell)
colnames(hold) <- c("Pardon","WardenTells")
Results <- rbind(Results,hold)
}
if(pardon == "C"){
wardenTell <- "B"
hold <- data.frame(pardon,wardenTell)
colnames(hold) <- c("Pardon","WardenTells")
Results <- rbind(Results,hold)
}
}
return(Results)
}
i_1 <- c(1/3,1/3,1/3)
i_2 <- c(1/2,1/4,1/4)
i_3 <- c(1/4,1/2,1/4)
i_4 <- c(1/4,1/4,1/2)
i_5 <- c(1/7,2/7,4/7)
results <- runSim(i_5)[-1,]
results$Pardon <- as.character(results$Pardon)
results$WardenTells <- as.character(results$WardenTells)
#write.csv(x = results, file= "results.csv")
tellsB <- table(results[results$WardenTells == "B",]$Pardon)
tellsC <- table(results[results$WardenTells == "C",]$Pardon)
cite(mclust)
library(mclust)
citation(mclust)
citation("mclust")
citation('USArrests')
USArrests
citation("USArrests")
train <- read.csv("Downloads/superconduct/train.csv")
train
train$critical_temp
train$number_of_elements
table(train$number_of_elements)
train$mean_atomic_mass
hist(train$mean_atomic_mass)
hist(train$mean_atomic_mass,breaks = 100)
hist(train$wtd_mean_atomic_mass)
hist(train$gmean_atomic_mass)
pairs(train)
pairs(train)
pairs(scale(train))
plot.new()
par(mar = rep(2, 4))
pairs(scale(train))
pairs(scale(train))
new_m <- read.csv("new_m.csv")
attach(new_m)
setwd("~/GitRepos/ZCWMT/FrequencyCode/zv_08_01_2018")
source('~/GitRepos/ZCWMT/FrequencyCode/zv_08_01_2018/zero_analysis.R', echo=TRUE)
setwd("~/GitRepos/ZCWMT/FrequencyCode/zv_08_01_2018")
library(ggplot2)
new_m <- read.csv("new_m.csv")
attach(new_m)
c_new <- new_m$partitions
c_new[c_new == 1] <- 'limegreen'
c_new[c_new == 2] <- 'red'
#c_new[c_new == 3] <- '#ffb62f'
c_new[c_new == 3] <- 'blue'
new_m$c_new <- c_new
p <-  ggplot(new_m, aes(x=LogDensity, y=ClaimNb)) +
theme( axis.line = element_line(colour = "black"),
panel.background = element_blank()) +
geom_point(color=c_new,
size = partitions/2
)  + xlab("Density") + ylab("Frequency")
p
getDensityTable <- function(in_df){
return(c(min(in_df),mean(in_df),max(in_df),sd(in_df)))
}
head(new_m[new_m$partitions == 1,])
getDensityTable(new_m[new_m$partitions == 1,])
getDensityTable <- function(in_df){
in_log <- in_df$LogDensity
return(c(min(in_log),mean(in_log),max(in_log),sd(in_log)))
}
getDensityTable(new_m[new_m$partitions == 1,])
getDensityTable(new_m[new_m$partitions == 2,])
getDensityTable(new_m[new_m$partitions == 3,])
setwd("~/GitRepos/ZCWMT/SeverityCode/")
loadData <- function() {
#try not to copy above this if you have the packages installed.
library(CASdatasets)
library(flexCWM)
#help(CASdatasets)
data(freMTPLfreq) # This is CONTRACTS Data Set Pg. 477
head(freMTPLfreq)
data(freMTPLsev)
head(freMTPLsev)
library(dplyr)
fr <- freMTPLfreq
dim(fr)
head(fr)
sev <- freMTPLsev
#Aggregate losses by PolicyID
library(plyr)
ag_loss <- ddply(sev,.(PolicyID),summarize, AggClaimAmount=sum(ClaimAmount))
dim(ag_loss)
head(ag_loss)
m <- merge(ag_loss, fr, by="PolicyID")
head(m)
dim(m)
summary(m)
m$LogAggClaimAmount <- log(m$AggClaimAmount)
m$LogDensity <- log(m$Density)
m$CatDriverAge <- m$DriverAge
m$CatDriverAge[m$DriverAge < 23 ]<- 5
m$CatDriverAge[m$DriverAge > 22 & m$DriverAge < 27] <- 4
m$CatDriverAge[m$DriverAge > 26 & m$DriverAge < 43] <- 3
m$CatDriverAge[m$DriverAge > 42 & m$DriverAge < 75] <- 2
m$CatDriverAge[m$DriverAge > 74] <- 1
m$CatCarAge <- m$CarAge
m$CatCarAge[m$CarAge < 1] <- 1
m$CatCarAge[m$CarAge > 0 & m$CarAge < 5] <- 2
m$CatCarAge[m$CarAge > 4 & m$CarAge < 10] <- 3
m$CatCarAge[m$CarAge > 9  & m$CarAge < 15] <- 4
m$CatCarAge[m$CarAge > 14] <- 5
m$powerF <- factor(1*(m$Power%in%letters[4:6])+
+ 2*(m$Power%in%letters[7:8]),labels=c("other","DEF","GH"))
#m24 <- m[m$Region == 'R24',]
#return(m24)
return(m)
}
loadDataServer <- function() {
return(read.csv("m.csv")[,-1])
}
# Load data depending on where you are, you can either do it from the package, or locally.
#m <- loadData()
#library(flexCWM)
library(flexCWMz)
set.seed(101)
runSev <- function(dataInput) {
attach(dataInput)
#fitLognormal <-  cwm(formulaY= LogSeverity ~ LogDensity + factor(CatCarAge) + factor(CatDriverAge) + Region + powerF, #+ Region + powerF + Gas,
#k=1:6, data=dataInput,
#familyY=inverse.gaussian(link = "identity"),
#familyY=Gamma(link ="identity"),
#familyY = gaussian(link="identity"),
#                    Xnorm = cbind(Density),
#iter.max = 500,
#                     modelXnorm = 'V')
fitLognormalt <- cwm(formulaY= LogSeverity ~ LogDensity + factor(CatCarAge) + factor(CatDriverAge)+ factor(Region)+ powerF, # + Region + powerF + Gas,
k=4, data=dataInput,
#familyY = gaussian(link="identity"),
familyY = gaussian(link="identity"),
#familyY=inverse.gaussian(link = "identity"),
#familyY=Gamma(link ="identity"),
Xnorm = cbind(LogDensity),
#iter.max = 500,
modelXnorm = 'V')
detach(dataInput)
return(list(u = fitLognormalt))
#            t = fitLognormalt))
}
#Results <- runSev(m)
ClaimGlobal <- m$ClaimNb
# Run the above function.
Results <- runSev(m)
t_model <- Results$t
#save(u_model,file = "u_model")
#save(t_model, file = "t_model")
# ============================================================
library(ggplot2)
detach(package:flexCWM)
library(flexCWMz)
m <- loadDataServer()
m$Severity <- m$AggClaimAmount/m$ClaimNb
m$LogSeverity <- log(m$Severity)
ClaimGlobal <- m$ClaimNb
Results <- runSev(m)
m$clusters <- getCluster(Results$u) +1
c_new <- m$clusters
c_new[c_new == 2] <- 'limegreen'
c_new[c_new == 3] <- 'red'
c_new[c_new == 4] <- '#ffb62f'
c_new[c_new == 5] <- 'blue'
m$c_new <- c_new
p <-  ggplot(m, aes(x=LogDensity, y=LogSeverity)) +
theme( axis.line = element_line(colour = "black"),
panel.background = element_blank()) +
geom_point(color=c_new)  + xlab("Density") + ylab("Severity")
p
summary(t-model)
summary(t_model)
t_model <- Results$t
summary(t_model)
t_model <- Results$u
summary(t_model)
summary(t_model)
m1 <- m[m$clusters == 1,]
dim(m1)
m$clusters
m1 <- m[m$clusters -1 == 1,]
dim(m1)
m4 <- m[m$clusters - 1 == 4,]
dim(m4)
m1_vol <- c(min(m1$Severity), mean(m1$Severity), max(m1$Severity), sd(m1$Severity))
m1_vol
m2_vol <- c(min(m2$Severity), mean(m2$Severity), max(m2$Severity), sd(m2$Severity))
m2 <- m[m$clusters -1 == 2,]
m2_vol <- c(min(m2$Severity), mean(m2$Severity), max(m2$Severity), sd(m2$Severity))
m1_vol
m2_vol
# Orange
m3 <- m[m$clusters - 1 == 3,]
m3_vol <- c(min(m3$Severity), mean(m3$Severity), max(m3$Severity), sd(m3$Severity))
m3_vol
# Blue
m4 <- m[m$clusters - 1 == 4,]
m4_vol <- c(min(m4$Severity), mean(m4$Severity), max(m4$Severity), sd(m4$Severity))
m4_vol
# Red
m2 <- m[m$clusters -1 == 2,]
m2_vol <- c(min(m2$Severity), mean(m2$Severity), max(m2$Severity), sd(m2$Severity))
m2_vol
# Orange
m3 <- m[m$clusters - 1 == 3,]
m3_vol <- c(min(m3$Severity), mean(m3$Severity), max(m3$Severity), sd(m3$Severity))
m3_vol
table(partitions)
table(m$clusters)
table(m$clusters)/sum(table(m$clusters))
table(m$Severity)
table(m$Severity)[1]
hist(x = m$Density)
hist(x = m$Density,breaks = 100)
hist(x = m$Density,breaks = 50)
hist(x = m$Density,breaks = 100)
hist(x = m$Density,breaks = 20)
hist(x = m$Density,breaks = 20,xlab = "Density")
hist(x = m$Density,breaks = 20,xlab = "Density",main = "")
hist(x = m$LogDensity,breaks = 20,xlab = "Density",main = "")
