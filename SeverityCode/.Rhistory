for (i in 1000) {
probabilities <<- pit(H)
action <<- sampleAction(pit(H))
Ravg <<- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - probabilities[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*probabilities[-action]
}
probabilities
H
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 1000) {
probabilities <- pit(H)
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - probabilities[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*probabilities[-action]
}
H
H
H
probabilities
pit(H)
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 1000) {
probabilities <- pit(H)
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <<- H[action] + rate*(R[action] - Ravg)*(1 - probabilities[action])
H[-action] <<- H[-action] - rate*(R[action] - Ravg)*probabilities[-action]
}
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 1000) {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
}
H
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 1000) {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
}
H
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 10000) {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
}
H
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 10000) {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
}
H
H = rep(0,5)
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 10000) {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
}
H
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
for (i in 10000) {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
}
H
repeat
h
help(repeat)
??repeat
repeat(1:{
repeat??
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
i <- 1
repeat {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
i <- i + 1
if (i > 1000){ break}
}
H
H = rep(0,5)
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
i <- 1
repeat {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
i <- i + 1
if (i > 1000){ break}
}
H
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
i <- 1
repeat {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
i <- i + 1
if (i > 1000){ break}
}
H
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
i <- 1
repeat {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
i <- i + 1
if (i > 1000){ break}
}
H
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
i <- 1
prob_storage <- data.frame(H)
repeat {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
prob_storage <- rbind(prob_storage,H)
i <- i + 1
if (i > 1000){ break}
}
H
prob_storage
R <- c(1,5,2,0.1,-2)
Ravg <- 0
H <<- rep(0,5)
rate <- 0.1
i <- 1
prob_storage <- data.frame(t(H))
repeat {
action <- sampleAction(pit(H))
Ravg <- Ravg + (R[action] - Ravg)/i
H[action] <- H[action] + rate*(R[action] - Ravg)*(1 - pit(H)[action])
H[-action] <- H[-action] - rate*(R[action] - Ravg)*pit(H)[-action]
prob_storage <- rbind(prob_storage,H)
i <- i + 1
if (i > 1000){ break}
}
prob_storage
plot(prob_storage)
plot(prob_storage,type= l)
plot(prob_storage,type= 'l')
plot(x = 1:1001,y = prob_storage,type= 'l')
plot(x = rep(1:1001,5),y = prob_storage,type= 'l')
rep(1:1001,5)
plot(x = c(1:1001,1:1001,1:1001,1:1001),y = prob_storage,type= 'l')
plot(x = c(1:1001,1:1001,1:1001,1:1001,1:1001),y = prob_storage,type= 'l')
dim(y)
dim(prob_storage)
c(1:1001,1:1001,1:1001,1:1001)
c(t(1:1001),t(1:1001),t(1:1001),t(1:1001)
)
rep(t(1:1001),5)
matrix(rep(t(1:1001),5),ncol = 5)
plot(x = matrix(rep(t(1:1001),5),ncol = 5),y = prob_storage,type = "l")
dim(matrix(rep(t(1:1001),5),ncol = 5))
dim(prob_storage)
plot(x = matrix(rep(t(1:1001),5),ncol = 5),y = prob_storage)
plot(prob_storage[1,])
plot(prob_storage[,1])
plot(prob_storage[,1],type = "l")
lines(prob_storage[,2])
lines(prob_storage[,3])
lines(prob_storage[,4])
lines(prob_storage[,5])
prob_storage
plot(prob_storage[,1],type = "l")
lines(prob_storage[,5],col = 1)
lines(prob_storage[,5],col = 2)
plot(x = 1:1001, prob_storage[,1],type = "l")
plot(x = 1:1001, prob_storage[,1],type = "l",col = 1)
plot(x = 1:1001, prob_storage[,1],type = "l",col = 1=2)
plot(x = 1:1001, prob_storage[,1],type = "l",col = 2)
lines(x = 1:1001, prob_storage[,2],col = 3)
plot(x = 1:1001, prob_storage[,1],type = "l",col = 1,ylim = c(-6,6))
lines(x = 1:1001, prob_storage[,2],col = 3)
lines(x = 1:1001, prob_storage[,3],col = 3)
lines(x = 1:1001, prob_storage[,3],col = 4)
lines(x = 1:1001, prob_storage[,4],col = 5)
lines(x = 1:1001, prob_storage[,5],col = 6)
Rcpp::sourceCpp('test.cpp')
timesTwo(100)
timesTwo(10000)
timesTwo(100000000)
timesTwo(-2e100)
runSim <- function(inputProbs) {
pardons <- sample(prob = inputProbs,x = c("A","B","C"),size = 10000,replace = TRUE)
Results <- data.frame("1","2")
colnames(Results) <- c("Pardon","WardenTells")
for(i in 1:length(pardons)){
pardon <- pardons[i]
if(pardon == "A") {
wardenTell <- sample( x = c("B","C"),size = 1)
hold <- data.frame(pardon,wardenTell)
colnames(hold) <- c("Pardon","WardenTells")
Results <- rbind(Results,hold)
}
if(pardon == "B"){
wardenTell <- "C"
hold <- data.frame(pardon,wardenTell)
colnames(hold) <- c("Pardon","WardenTells")
Results <- rbind(Results,hold)
}
if(pardon == "C"){
wardenTell <- "B"
hold <- data.frame(pardon,wardenTell)
colnames(hold) <- c("Pardon","WardenTells")
Results <- rbind(Results,hold)
}
}
return(Results)
}
i_1 <- c(1/3,1/3,1/3)
i_2 <- c(1/2,1/4,1/4)
i_3 <- c(1/4,1/2,1/4)
i_4 <- c(1/4,1/4,1/2)
i_5 <- c(1/7,2/7,4/7)
results <- runSim(i_5)[-1,]
results$Pardon <- as.character(results$Pardon)
results$WardenTells <- as.character(results$WardenTells)
#write.csv(x = results, file= "results.csv")
tellsB <- table(results[results$WardenTells == "B",]$Pardon)
tellsC <- table(results[results$WardenTells == "C",]$Pardon)
setwd("~/GitRepos/ZCWMT/SeverityCode/")
loadData <- function() {
#try not to copy above this if you have the packages installed.
library(CASdatasets)
library(flexCWM)
#help(CASdatasets)
data(freMTPLfreq) # This is CONTRACTS Data Set Pg. 477
head(freMTPLfreq)
data(freMTPLsev)
head(freMTPLsev)
library(dplyr)
fr <- freMTPLfreq
dim(fr)
head(fr)
sev <- freMTPLsev
#Aggregate losses by PolicyID
library(plyr)
ag_loss <- ddply(sev,.(PolicyID),summarize, AggClaimAmount=sum(ClaimAmount))
dim(ag_loss)
head(ag_loss)
m <- merge(ag_loss, fr, by="PolicyID")
head(m)
dim(m)
summary(m)
m$LogAggClaimAmount <- log(m$AggClaimAmount)
m$LogDensity <- log(m$Density)
m$CatDriverAge <- m$DriverAge
m$CatDriverAge[m$DriverAge < 23 ]<- 5
m$CatDriverAge[m$DriverAge > 22 & m$DriverAge < 27] <- 4
m$CatDriverAge[m$DriverAge > 26 & m$DriverAge < 43] <- 3
m$CatDriverAge[m$DriverAge > 42 & m$DriverAge < 75] <- 2
m$CatDriverAge[m$DriverAge > 74] <- 1
m$CatCarAge <- m$CarAge
m$CatCarAge[m$CarAge < 1] <- 1
m$CatCarAge[m$CarAge > 0 & m$CarAge < 5] <- 2
m$CatCarAge[m$CarAge > 4 & m$CarAge < 10] <- 3
m$CatCarAge[m$CarAge > 9  & m$CarAge < 15] <- 4
m$CatCarAge[m$CarAge > 14] <- 5
m$powerF <- factor(1*(m$Power%in%letters[4:6])+
+ 2*(m$Power%in%letters[7:8]),labels=c("other","DEF","GH"))
#m24 <- m[m$Region == 'R24',]
#return(m24)
return(m)
}
loadDataServer <- function() {
return(read.csv("m.csv")[,-1])
}
runSev <- function(dataInput) {
attach(dataInput)
#fitLognormal <-  cwm(formulaY= LogSeverity ~ LogDensity + factor(CatCarAge) + factor(CatDriverAge) + Region + powerF, #+ Region + powerF + Gas,
#k=1:6, data=dataInput,
#familyY=inverse.gaussian(link = "identity"),
#familyY=Gamma(link ="identity"),
#familyY = gaussian(link="identity"),
#                    Xnorm = cbind(Density),
#iter.max = 500,
#                     modelXnorm = 'V')
fitLognormalt <- cwm(formulaY= LogSeverity ~ LogDensity + factor(CatCarAge) + factor(CatDriverAge)+ factor(Region)+ powerF, # + Region + powerF + Gas,
k=4, data=dataInput,
#familyY = gaussian(link="identity"),
familyY = gaussian(link="identity"),
#familyY=inverse.gaussian(link = "identity"),
#familyY=Gamma(link ="identity"),
Xnorm = cbind(LogDensity),
#iter.max = 500,
modelXnorm = 'V')
detach(dataInput)
return(list(u = fitLognormalt))
#            t = fitLognormalt))
}
library(ggplot2)
detach(package:flexCWM)
library(flexCWMz)
m <- loadDataServer()
m$Severity <- m$AggClaimAmount/m$ClaimNb
m$LogSeverity <- log(m$Severity)
ClaimGlobal <- m$ClaimNb
Results <- runSev(m)
m$clusters <- getCluster(Results$u) +1
c_new <- m$clusters
c_new[c_new == 2] <- 'limegreen'
c_new[c_new == 3] <- 'red'
c_new[c_new == 4] <- '#ffb62f'
c_new[c_new == 5] <- 'blue'
m$c_new <- c_new
p <-  ggplot(m, aes(x=LogDensity, y=LogSeverity)) +
geom_point(color=c_new)  + xlab("Density") + ylab("Severity")
p
set.seed(101)
library(ggplot2)
detach(package:flexCWM)
library(flexCWMz)
m <- loadDataServer()
m$Severity <- m$AggClaimAmount/m$ClaimNb
m$LogSeverity <- log(m$Severity)
ClaimGlobal <- m$ClaimNb
Results <- runSev(m)
m$clusters <- getCluster(Results$u) +1
c_new <- m$clusters
c_new[c_new == 2] <- 'limegreen'
c_new[c_new == 3] <- 'red'
c_new[c_new == 4] <- '#ffb62f'
c_new[c_new == 5] <- 'blue'
m$c_new <- c_new
p <-  ggplot(m, aes(x=LogDensity, y=LogSeverity)) +
geom_point(color=c_new)  + xlab("Density") + ylab("Severity")
p
#plot(m$LogDensity, m$LogSeverity, col = m$clusters, main = "Individually Weighted")
table(getCluster(Results$u))
print("RUNNING INDIVIDUALLY WEIGHTED")
m$Severity <- m$AggClaimAmount/m$ClaimNb
m$LogSeverity <- log(m$Severity)
ClaimGlobal <- m$ClaimNb
Results <- runSev(m)
m$clusters <- getCluster(Results$u) +1
c_new <- m$clusters
c_new[c_new == 2] <- 'teal'
c_new[c_new == 3] <- 'red'
c_new[c_new == 4] <- '#ffb62f'
c_new[c_new == 5] <- 'blue'
m$c_new <- c_new
p <-  ggplot(m, aes(x=LogDensity, y=LogSeverity)) +
geom_point(color=c_new)  + xlab("Density") + ylab("Severity")
p
m$clusters <- getCluster(Results$u) +1
c_new <- m$clusters
c_new[c_new == 2] <- 'purple'
c_new[c_new == 3] <- 'red'
c_new[c_new == 4] <- '#ffb62f'
c_new[c_new == 5] <- 'blue'
m$c_new <- c_new
p <-  ggplot(m, aes(x=LogDensity, y=LogSeverity)) +
geom_point(color=c_new)  + xlab("Density") + ylab("Severity")
p
c_new[c_new == 2] <- 'green'
c_new[c_new == 3] <- 'red'
c_new[c_new == 4] <- '#ffb62f'
c_new[c_new == 5] <- 'blue'
m$c_new <- c_new
p <-  ggplot(m, aes(x=LogDensity, y=LogSeverity)) +
geom_point(color=c_new)  + xlab("Density") + ylab("Severity")
p
c_new <- m$clusters
c_new[c_new == 2] <- 'green'
c_new[c_new == 3] <- 'red'
c_new[c_new == 4] <- '#ffb62f'
c_new[c_new == 5] <- 'blue'
m$c_new <- c_new
p <-  ggplot(m, aes(x=LogDensity, y=LogSeverity)) +
geom_point(color=c_new)  + xlab("Density") + ylab("Severity")
p
m$clusters <- getCluster(Results$u) +1
c_new <- m$clusters
c_new[c_new == 2] <- 'limegreen'
c_new[c_new == 3] <- 'red'
c_new[c_new == 4] <- '#ffb62f'
c_new[c_new == 5] <- 'blue'
m$c_new <- c_new
p <-  ggplot(m, aes(x=LogDensity, y=LogSeverity)) +
geom_point(color=c_new)  + xlab("Density") + ylab("Severity")
p
, col = m$clusters, main = "Individually Weighted")
table(getCluster(Results$u))
print("RUNNING INDIVIDUALLY WEIGHTED")
table(c_new)
detach(package:flexCWMz)
library(flexCWM)
library(ggplot2)
Results <- runSev(m)
table(getCluster(Results$u))
m$clusters <- getCluster(Results$u) + 2
c_new <- m$clusters
c_new[c_new == 3] <- '#ffb62f'
c_new[c_new == 4] <- 'red'
c_new[c_new == 5] <- 'limegreen'
c_new[c_new == 6] <- 'blue'
m$c_new <- c_new
p <- NULL
q <-  ggplot(m, aes(x=LogDensity, y=LogSeverity)) +
geom_point(color=c_new)  + xlab("Density") + ylab("Severity")
q
table(getCluster(Results$u))
print("RUNNING ClUSTER WEIGHTED")
m$clusters <- getCluster(Results$u) + 1
c_new <- m$clusters
c_new[c_new == 3] <- '#ffb62f'
c_new[c_new == 4] <- 'red'
c_new[c_new == 5] <- 'limegreen'
c_new[c_new == 6] <- 'blue'
m$c_new <- c_new
p <- NULL
q <-  ggplot(m, aes(x=LogDensity, y=LogSeverity)) +
geom_point(color=c_new)  + xlab("Density") + ylab("Severity")
q
m$clusters <- getCluster(Results$u) + 1
c_new <- m$clusters
c_new[c_new == 2] <- '#ffb62f'
c_new[c_new == 3] <- 'red'
c_new[c_new == 4] <- 'limegreen'
c_new[c_new == 5] <- 'blue'
m$c_new <- c_new
p <- NULL
q <-  ggplot(m, aes(x=LogDensity, y=LogSeverity)) +
geom_point(color=c_new)  + xlab("Density") + ylab("Severity")
q
table(getCluster(Results$u))
c_new <- m$clusters
c_new[c_new == 2] <- 'limegreen'
c_new[c_new == 3] <- 'orange'
c_new[c_new == 4] <- 'red'
c_new[c_new == 5] <- 'blue'
m$c_new <- c_new
p <- NULL
q <-  ggplot(m, aes(x=LogDensity, y=LogSeverity)) +
geom_point(color=c_new)  + xlab("Density") + ylab("Severity")
q
m$clusters <- getCluster(Results$u) + 1
c_new <- m$clusters
c_new[c_new == 2] <- 'blue'
c_new[c_new == 3] <- 'orange'
c_new[c_new == 4] <- 'red'
c_new[c_new == 5] <- 'limegreen'
m$c_new <- c_new
p <- NULL
q <-  ggplot(m, aes(x=LogDensity, y=LogSeverity)) +
geom_point(color=c_new)  + xlab("Density") + ylab("Severity")
q
table(getCluster(Results$u))
table(c_new)
